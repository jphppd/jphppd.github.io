(function() {var implementors = {
"alarm_clock":[["impl Default for <a class=\"struct\" href=\"alarm_clock/outputs/display/struct.ColumnMajorBuffer.html\" title=\"struct alarm_clock::outputs::display::ColumnMajorBuffer\">ColumnMajorBuffer</a>"],["impl&lt;T: <a class=\"trait\" href=\"alarm_clock/outputs/display/trait.DataLayout.html\" title=\"trait alarm_clock::outputs::display::DataLayout\">DataLayout</a>&gt; Default for <a class=\"struct\" href=\"alarm_clock/outputs/display/struct.Square.html\" title=\"struct alarm_clock::outputs::display::Square\">Square</a>&lt;T&gt;"],["impl Default for <a class=\"struct\" href=\"alarm_clock/clocks/dcf77/phase_detector/struct.PhaseDetector.html\" title=\"struct alarm_clock::clocks::dcf77::phase_detector::PhaseDetector\">PhaseDetector</a>"],["impl&lt;I2C&gt; Default for <a class=\"struct\" href=\"alarm_clock/clocks/rtc/struct.Rtc.html\" title=\"struct alarm_clock::clocks::rtc::Rtc\">Rtc</a>&lt;I2C&gt;<span class=\"where fmt-newline\">where\n    I2C: <a class=\"trait\" href=\"embedded_hal/blocking/i2c/trait.Write.html\" title=\"trait embedded_hal::blocking::i2c::Write\">Write</a> + <a class=\"trait\" href=\"embedded_hal/blocking/i2c/trait.WriteRead.html\" title=\"trait embedded_hal::blocking::i2c::WriteRead\">WriteRead</a> + Default,</span>"],["impl&lt;const WRITE_BUFFER_SIZE: usize, const READ_BUFFER_SIZE: usize&gt; Default for <a class=\"struct\" href=\"alarm_clock/serial_commands/struct.SerialBuffer.html\" title=\"struct alarm_clock::serial_commands::SerialBuffer\">SerialBuffer</a>&lt;WRITE_BUFFER_SIZE, READ_BUFFER_SIZE&gt;"],["impl Default for <a class=\"struct\" href=\"alarm_clock/outputs/led_strip/struct.Color.html\" title=\"struct alarm_clock::outputs::led_strip::Color\">Color</a>"],["impl Default for <a class=\"struct\" href=\"alarm_clock/clocks/dcf77/protocol/struct.Signals.html\" title=\"struct alarm_clock::clocks::dcf77::protocol::Signals\">Signals</a>"],["impl Default for <a class=\"struct\" href=\"alarm_clock/outputs/display/struct.FrameBuffer.html\" title=\"struct alarm_clock::outputs::display::FrameBuffer\">FrameBuffer</a>"],["impl Default for <a class=\"enum\" href=\"alarm_clock/outputs/display/enum.DisplayIntensity.html\" title=\"enum alarm_clock::outputs::display::DisplayIntensity\">DisplayIntensity</a>"],["impl Default for <a class=\"struct\" href=\"alarm_clock/clocks/timer/struct.Timer.html\" title=\"struct alarm_clock::clocks::timer::Timer\">Timer</a>"],["impl Default for <a class=\"struct\" href=\"alarm_clock/clocks/dcf77/polled_values/struct.PolledValues.html\" title=\"struct alarm_clock::clocks::dcf77::polled_values::PolledValues\">PolledValues</a>"],["impl Default for <a class=\"struct\" href=\"alarm_clock/clocks/dcf77/struct.Dcf77.html\" title=\"struct alarm_clock::clocks::dcf77::Dcf77\">Dcf77</a>"],["impl Default for <a class=\"struct\" href=\"alarm_clock/clocks/datetime/struct.Time.html\" title=\"struct alarm_clock::clocks::datetime::Time\">Time</a>"]],
"atmega_hal":[["impl Default for <a class=\"struct\" href=\"atmega_hal/adc/struct.AdcSettings.html\" title=\"struct atmega_hal::adc::AdcSettings\">AdcSettings</a>"],["impl Default for <a class=\"enum\" href=\"atmega_hal/adc/enum.ReferenceVoltage.html\" title=\"enum atmega_hal::adc::ReferenceVoltage\">ReferenceVoltage</a>"]],
"avr_hal_generic":[["impl Default for <a class=\"struct\" href=\"avr_hal_generic/spi/struct.Settings.html\" title=\"struct avr_hal_generic::spi::Settings\">Settings</a>"],["impl Default for <a class=\"enum\" href=\"avr_hal_generic/adc/enum.ClockDivider.html\" title=\"enum avr_hal_generic::adc::ClockDivider\">ClockDivider</a>"]],
"ringbuffer":[["impl&lt;T, const CAP: usize&gt; Default for <a class=\"struct\" href=\"ringbuffer/struct.ConstGenericRingBuffer.html\" title=\"struct ringbuffer::ConstGenericRingBuffer\">ConstGenericRingBuffer</a>&lt;T, CAP&gt;"]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()